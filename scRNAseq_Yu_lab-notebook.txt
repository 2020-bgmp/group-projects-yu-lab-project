----------------------
|  scRNA-seq Yu Lab  |
----------------------

Christian Chua
Bioninformatics 624
Fall 2020

----------------------
| Table of Contents  |
----------------------

Date        Description
10/07/2020  Temporary Data Location; Data Exploration
10/08/2020  Data Exploration II; 10x Genomics and CellRanger Information


----------------------
|     10/07/2020     |
----------------------

Objective: Document Data Information; Data Exploration
Description: Figure out why there are less index reads than the files. 10x Genomics

I. GitHub
    A. Locations
        GitHubLink: https://github.com/2020-bgmp/group-projects-yu-lab-project
        Local computer: /home/cchua/bioinformatics/group-projects-yu-lab-project
        Talapas (temporary): /projects/bgmp/mchang3/temp_proj_dir/data
        Talapas (permanent): /projects/bgmp/shared/groups/2020/neuron_nerds
        Google Drive: https://drive.google.com/drive/folders/1gaivw0KDvIC3jG6LDb2otxM6PMkNQBCS
            - meeting notes
            - group assignments
    B. Clone repo
        NOTE: created readme.MD file to clone
        git clone https://github.com/2020-bgmp/group-projects-yu-lab-project.git
        cd group-projects-yu-lab-project/
        git remote rename origin upstream
        git remote add origin https://github.com/2020-bgmp/group-projects-yu-lab-project.git
        git remote -v
        git pull origin master
        git push -u origin master
    C. Configure Git
        git config --global user.email "chrisanthony92@ymail.com"
        git config --global user.name "Chris-Anthony"
    D. Commit Lab Notebook
        git add scRNAseq_Yu_lab-notebook.txt
        git status
        git commit -m "Chris' Lab Notebook"
        git push
        git pull
II. Data Exploration
    A. interactive session
        srun --account=bgmp --partition=bgmp --nodes=1 --ntasks-per-node=1 \
        --time=2:00:00 --cpus-per-task=1 --pty bash

        squeue -u cchua
             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)
          13184935      bgmp     bash    cchua  R       0:07      1 n225
    B. List files
         ls -1
            P10.index.fq.gz
            P10.md5
            P10.read1.fastq.gz
            P10.read2.fastq.gz
    C. Check data integrity
        cat P10.md5
            279aac0db745cee15a50f780f1db2b60  P10.read1.fastq.gz
            ff4717b14975c9d60d910df461b46f88  P10.read2.fastq.gz
            622b7c61c38b109298458caa37d5cab4  P10.index.fq.gz
        md5sum P10.index.fq.gz
            622b7c61c38b109298458caa37d5cab4  P10.index.fq.gz
        md5sum P10.read1.fastq.gz
            279aac0db745cee15a50f780f1db2b60  P10.read1.fastq.gz
        md5sum P10.read2.fastq.gz
            ff4717b14975c9d60d910df461b46f88  P10.read2.fastq.gz
    D. Head each file
        zcat P10.index.fq.gz | head
            @D00575:498:HK7KCBCX2:1:1102:1429:1888 1:N:0:TCAGCCGT
            TCAGCCGT
            +
            DDDDDIII
            @D00575:498:HK7KCBCX2:1:1102:1392:1911 1:N:0:TCAGCCGT
            TCAGCCGT
            +
            DDDDDIII
            @D00575:498:HK7KCBCX2:1:1102:1395:1983 1:N:0:TCAGCCGT
            TCAGCCGT
        zcat P10.read1.fastq.gz | head
            @D00575:548:HTLKKBCX2:1:1104:1179:1841 1:N:0:TCAGCCGT
            NATATGGAGTGACATAACCCACGGTTT
            +
            #<DDDIIIIIIIIIIIIIIIIIIIIIH
            @D00575:548:HTLKKBCX2:1:1104:1137:1877 1:N:0:TCAGCCGT
            NAGGTTCGTTCGGGCTAGGGGGTTGAT
            +
            #<DDDHIIHIIIIIIIIIHHDIEHHIH
            @D00575:548:HTLKKBCX2:1:1104:1104:1901 1:N:0:TCAGCCGT
            ACGCAGCAGTACACCTCTATCTGTCGT
        zcat P10.read2.fastq.gz | head
            @D00575:548:HTLKKBCX2:1:1104:1179:1841 2:N:0:TCAGCCGT
            CTCGCCCCTACCATTGGGACAGGAATGTCATGTCACCCCATCGTCCTGTGTCTCCCACCATCGCTATGCAAAGTGGTTCTTGTTGTACATAAGATTTAA
            +
            DDDDDIIIIIIHHIIIGIIHHHC@HEHHHIHHIIIIIIHHIIIIIIHIIGHHHIIIHIIIIIIIIHHHHHEHHHIIIHEHHHFH@GFHIHHIHHIHFHH
            @D00575:548:HTLKKBCX2:1:1104:1137:1877 2:N:0:TCAGCCGT
            GGCCAAACAGGAAAAGAAGAAGAAGAAGACAGGCCGGGCCAAGAGGCGAATGCAGTACAACCGGCGCTTTGTCAATGTTGTGCCCACCTTTGGGAAGAA
            +
            DDDDDIHGIIIGFEHH@FH@CECEE1<GCH@@CEHHIHHIIHHFHGHIIHIIIHIHHIIIIIGHHHIIIIIIHIIIEH@GHIIHIGHIHGHHIHIIIEE
            @D00575:548:HTLKKBCX2:1:1104:1104:1901 2:N:0:TCAGCCGT
            GGTCGCCAAAGTGACAGCCGGCGCCGCGTCCAAGCTCTCCAAGATACGAGTCGTTCGCAAGTCTATCGCCCGAGTCCTCACTGTTATGAACCAGACTCA
        conclusions:
        - paired reads, same locations in the header lines
        - the lengths of the two reads are different - 10x Genomic Specific?
        - where is the bitwise flag?
        - header lines contain the barcodes information
        - there is only 1 index file
    E. Tail each file 
        zcat P10.index.fq.gz | tail
            +
            @0<D@FHH
            @D00575:498:HK7KCBCX2:2:2216:20762:101228 1:N:0:ATCTTTAG
            ATCTTTAG
            +
            D@BDDIII
            @D00575:498:HK7KCBCX2:2:2216:21093:101121 1:N:0:ATCTTTAG
            ATCTTTAG
            +
            DD0DDC1<
         zcat P10.read1.fastq.gz | tail
            +
            D00D@<1C@FHHFFHHHI/1F1FH1<D
            @D00575:548:HTLKKBCX2:2:2216:21294:101002 1:N:0:ATCTTTAG
            GTTCTCGCAGCCTATATTGCCACACGT
            +
            DDDDDIHHIHGGHIIIHIHHHGHIIIH
            @D00575:548:HTLKKBCX2:2:2216:21271:101030 1:N:0:ATCTTTAG
            CGTCTACTCTCTTATGCGACTTTTGTT
            +
            D@BD?<FHHIHIEF?11EC//EGC@HH
        zcat P10.read2.fastq.gz | tail
            +
            BDD?@1111<@C@11<<1<1<<1C11@1G?11<F?1111<=/?E=?1111C1C111<F1<<111<1CC?C0C@@1<111<D11@11<111<<1<<FHGC
            @D00575:548:HTLKKBCX2:2:2216:21294:101002 2:N:0:ATCTTTAG
            GTCAGACTCCCAAGGTGGCCAAACAGGAAAAGAAGAAGAAGAAGACAGGCCGGGCCAAGAGGCGAATGCAGTACAACCGGCGCTTTGTCAATGTTGTGC
            +
            DDCBBIHHH@GFHEHHHIGHEHHHHIIEFGHHGHHHIHHHIIGGHIIIIIIIIIIIIIIHIEHFHHHIIIHHIIIHEHH?DHHHHIHHIIH?@DGEH=<
            @D00575:548:HTLKKBCX2:2:2216:21271:101030 2:N:0:ATCTTTAG
            GAAAAAAAAAAAAATTAAAAAAACAAGGTCCCTACACCGCTCCCTCCTTTTTAACAAGGAAGTTGAAATTTAGGGTTTCCTTTTCATCGGAACCCTGAA
            +
            DA@DBGDHD</C/CCG<<@CCDCCCH11<1<1<<CH11/</</1<@G@1CCF111<<11<11<1<1DC1<11111<10111<<11<111001/<<C11<
        conclusions:
        - no extraneous lines

----------------------
|     10/08/2020     |
----------------------

Objective: Data Exploration continued; 
Description: Review 10x Genomics Sequencing; Review Cell-Ranger

srun --account=bgmp --partition=bgmp --nodes=1 --ntasks-per-node=1 \
--time=2:00:00 --cpus-per-task=1 --pty bash

        squeue -u cchua
             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)
          13185261      bgmp     bash    cchua  R       0:05      1 n225

    F. Find number of records
        zcat P10.index.fq.gz | wc -l
            332566572

        zcat P10.read1.fastq.gz | wc -l
            1064991604

        zcat P10.read2.fastq.gz | wc -l
            timed out error -> rerun as a slurm script

            nano wc_read2.srun

                #!/bin/bash
                #SBATCH --account=bgmp
                #SBATCH --partition=bgmp
                #SBATCH --job-name=wc_read2_%j
                #SBATCH --output=wc_read2_%j.out
                #SBATCH --error=wc_read2_%j.err
                #SBATCH --time=0-23:59:59
                #SBATCH --nodes=1
                #SBATCH --ntasks-per-node=1
                #SBATCH --cpus-per-task=1

                dir="/projects/bgmp/shared/groups/2020/neuron_nerds/THE_DATA"

                /usr/bin/time -v zcat $dir/P10.read2.fastq.gz | wc -l

            sbatch wc_read2.srun

    G. Length of reads
        zcat P10.index.fq.gz | head -2 | tail -1 | wc -c
            9
            8 characters because of newline character

        zcat P10.read1.fastq.gz | head -2 | tail -1 | wc -c
            28
            27 characters

        zcat P10.read2.fastq.gz | head -2 | tail -1 | wc -c
            100
            99 characters

    H. Pull indices out of header line
        NOTE: Make this a slurm script and run in personal directory
        nano count_index.srun

            #!/bin/bash
            #SBATCH --account=bgmp
            #SBATCH --partition=bgmp
            #SBATCH --job-name=count_index_%j
            #SBATCH --output=count_index_%j.out
            #SBATCH --error=count_index_%j.err
            #SBATCH --time=0-23:59:59
            #SBATCH --nodes=1
            #SBATCH --ntasks-per-node=1
            #SBATCH --cpus-per-task=1

            dir="/projects/bgmp/shared/groups/2020/neuron_nerds/THE_DATA"

            /usr/bin/time -v | zcat $dir/P10.index.fq.gz | sed -n '1~4p' \
            | cut --delimiter=" " --fields=2 | cut --delimiter=":" --fields=4 \
            | sort | uniq -c > index_barcodes.txt

            /usr/bin/time -v | zcat $dir/P10.read1.fastq.gz | sed -n '1~4p' \
            | cut --delimiter=" " --fields=2 | cut --delimiter=":" --fields=4 \
            | sort | uniq -c > read1_barcodes.txt

            /usr/bin/time -v | zcat $dir/P10.read2.fastq.gz | sed -n '1~4p' \
            | cut --delimiter=" " --fields=2 | cut --delimiter=":" --fields=4 \
            | sort | uniq -c > read2_barcodes.txt

        sbatch count_index.srun

III. 10x Genomics Sequencing
    "make every cell count"
    A. How does the technology work
    B. What are the sequencing parameters

IV. CellRanger
    Link: https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger

    A. 4 pipelines:
        1. cellranger mkfastq - demultiplexes raw base call (BCL) files generated by Illumina sequencers into FASTQ files. 
        2. cellranger count - takes FASTQ files from cellranger mkfastq and performs alignment, filtering, barcode counting, and UMI counting.
        3. cellranger aggr - aggregates outputs from multiple runs of cellranger count, normalizing those runs to the same sequencing depth 
                            and then recomputing the feature-barcode matrices and analysis on the combined data. 
        4. cellranger reanalyze - takes feature-barcode matrices produced by cellranger count or cellranger aggr 
                            and reruns the dimensionality reduction, clustering, and gene expression algorithms using tunable parameter settings

----------------------
|     10/13/2020     |
----------------------

Chromium Single Cell 30 Library & Gel Bead Kit v2
26 bp Read1, 8 bp I7 Index and 98 bp Read2. 20000-50000 reads were obtained per cell.

WORKFLOW:
Single cell RNA-seq data were first analyzed by the Cell Ranger pipeline.
The UMI counts from different samples were combined in Seurat for further analysis (see below)
Cells expressing mOSN markers were further sub-clustered using a multi-kernel learning method, SIMLR (Wang et al., 2017). For OR expression analysis, only ORs with normalized expression above 2.5 we used.
For the GO term analysis, GO terms used in the analysis were from GO.db (Carlson, 2018). The enrichment was calculated by Goseq (Young et al., 2010). Enriched GO terms were connected by their hierarchies from GO.db and converted into gexf format using the rgexf function.
The GO term topographic map was visualized in Gephi (gephi.org). 
KEGG pathway analysis was done using Pathview (Luo and Brouwer, 2013).

STATISTICS:
Differential expression was called using the Wilcoxen rank sum test for each of the three mOSN clusters versus the other two mOSN clusters using Seurat’s FindMarkers function.
A Bonferroni correction was made based on the total number of genes in the dataset and was labeled as ‘‘p_val_adj’’ for the adjusted pvalue.
The proportion of cells in the primary cluster showing any expression for a gene was labeled as ‘‘pct.1’’ and the proportion in the two other clusters combined was labeled as ‘‘pct.2.’’ The average log fold change between the groupings was labeled ‘‘avg_logFC’’ with a positive value denoting a higher level of expression in the primary cluster and a negative value indicating a decreased expression level relative to the other two clusters. Only genes that pass an adjusted p-value cutoff of 0.05 were included in the list.
Data from Tan et al., 2016 were also used for the analysis. Differentially expressed genes were identified by two tailed Student’s t test. Genes with log2 fold change higher than 1 and log2 p-value larger than 5 were used to perform the GO term enrichment analysis.

CELL RANGER
Cell Ranger is a set of analysis pipelines that process Chromium single-cell RNA-seq output to align reads, generate feature-barcode matrices and perform clustering and gene expression analysis. Cell Ranger includes four pipelines relevant to single-cell gene expression experiments:
•	mkfastq demultiplexes raw base call (BCL) files generated by Illumina sequencers into FASTQ files. It is a wrapper around Illumina's bcl2fastq, with additional useful features that are specific to 10x libraries and a simplified sample sheet format.
•	count takes FASTQ files from cellranger mkfastq and performs alignment, filtering, barcode counting, and UMI counting. It uses the Chromium cellular barcodes to generate feature-barcode matrices, determine clusters, and perform gene expression analysis. The count pipeline can take input from multiple sequencing runs on the same GEM well. cellranger count also processes Feature Barcode data alongside Gene Expression reads.
•	aggr aggregates outputs from multiple runs of cellranger count, normalizing those runs to the same sequencing depth and then recomputing the feature-barcode matrices and analysis on the combined data. The aggr pipeline can be used to combine data from multiple samples into an experiment-wide feature-barcode matrix and analysis.
<- would this be useful in combating batch effect?
•	reanalyze takes feature-barcode matrices produced by cellranger count or cellranger aggr and reruns the dimensionality reduction, clustering, and gene expression algorithms using tunable parameter settings.
These pipelines combine Chromium-specific algorithms with the widely used RNA-seq aligner STAR. Output is delivered in standard BAM, MEX, CSV, HDF5 and HTML formats that are augmented with cellular information.

MKFASTQ
a pipeline that wraps Illumina's bcl2fastq and provides a number of convenient features in addition to the features of bcl2fastq:
-	Translates 10x sample index names into the corresponding oligonucleotides in the sample index.
-	Supports a simplified CSV samplesheet format to handle 10x use cases.
-	Generates sequencing and 10x-specific quality control metrics, including barcode quality, accuracy, and diversity.
-	Supports most bcl2fastq arguments, such as --use-bases-mask.
Do we have a Simple CSV Samplesheet for running cellranger mkfastq?

Example:
Lane,Sample,Index
1,test_sample,SI-TT-D9
CODE:
$ cellranger mkfastq --id=tiny-bcl \
                     --run=/path/to/tiny_bcl \
                     --csv=cellranger-tiny-bcl-simple-1.2.0.csv

COUNT
uses all of the cores available on your system to execute pipeline stages. 
--localcores=16 will limit cellranger to using up to sixteen cores at once.
 --localmem will restrict the amount of memory (in GB) used by cellranger.

CODE:
$ cellranger count --id=sample345 \
                   --transcriptome=/opt/refdata-gex-GRCh38-2020-A \
                   --fastqs=/home/jdoe/runs/HAWT7ADXX/outs/fastq_path \
                   --sample=mysample \
                   --expect-cells=1000 \
                   --localcores=8 \
                   --localmem=64

AGGR
Chemistry Batch Correction
Aggregate Targeted Gene Expression Data
Depth Normalization: automatically equalizes the average read depth per cell between groups before merging. This approach avoids artifacts that may be introduced due to differences in sequencing depth.

REANALYZE
PCA, nearest neighbors, TSNE
For example, More Principal Components and Clusters

----------------------
|     10/13/2020     |
----------------------

Seurat

downloaded seurat tutorial

1. need to download packages

install.packages("dplyr")
install.packages("Seurat")

----------------------
|     10/16/2020     |
----------------------

we were given fastq files so we do not need to run MKFASTQ

running counts pipeline

srun --account=bgmp --partition=bgmp --nodes=1 --ntasks-per-node=1 \
--time=2:00:00 --cpus-per-task=1 --pty bash

conda activate bgmp_py37

module spider cellranger

--------------------------------------------------------------------------------------------------------------------
  cellranger: cellranger/3.0.2
--------------------------------------------------------------------------------------------------------------------

    This module can be loaded directly: module load cellranger/3.0.2

conda activate bgmp_py37
module load cellranger/3.0.2

cellranger count --help
    /gpfs/packages/cellranger/3.0.2/cellranger-cs/3.0.2/bin
    cellranger count (3.0.2)
    Copyright (c) 2019 10x Genomics, Inc.  All rights reserved.
    -------------------------------------------------------------------------------

    'cellranger count' quantifies single-cell gene expression.

    The commands below should be preceded by 'cellranger':

    Usage:
        count
            --id=ID
            [--fastqs=PATH]
            [--sample=PREFIX]
            --transcriptome=DIR
            [options]
        count <run_id> <mro> [options]
        count -h | --help | --version

    Arguments:
        id      A unique run id, used to name output folder [a-zA-Z0-9_-]+.
        fastqs  Path of folder created by mkfastq or bcl2fastq.
        sample  Prefix of the filenames of FASTQs to select.
        transcriptome   Path of folder containing 10x-compatible reference.

    Options:
    # Single Cell Gene Expression
        --description=TEXT  Sample description to embed in output files.
        --libraries=CSV     CSV file declaring input library data sources.
        --expect-cells=NUM  Expected number of recovered cells.
        --force-cells=NUM   Force pipeline to use this number of cells, bypassing
                                the cell detection algorithm.
        --feature-ref=CSV   Feature reference CSV file, declaring feature-barcode
                                constructs and associated barcodes.
        --nosecondary       Disable secondary analysis, e.g. clustering. Optional.
        --r1-length=NUM     Hard trim the input Read 1 to this length before
                                analysis.
        --r2-length=NUM     Hard trim the input Read 2 to this length before
                                analysis.
        --chemistry=CHEM    Assay configuration. NOTE: by default the assay
                                configuration is detected automatically, which
                                is the recommened mode. You usually will not need
                                to specify a chemistry. Options are: 'auto' for
                                autodetection, 'threeprime' for Single Cell 3',
                                'fiveprime' for  Single Cell 5', 'SC3Pv1' or
                                'SC3Pv2' or 'SC3Pv3' for Single Cell 3' v1/v2/v3,
                                'SC5P-PE' or 'SC5P-R2' for Single Cell 5'.
                                paired-end/R2-only. Default: auto.
        --no-libraries      Proceed with processing using a --feature-ref but no
                                feature-barcoding data specified with the
                                'libraries' flag.
        --lanes=NUMS        Comma-separated lane numbers.
        --indices=INDICES   Comma-separated sample index set "SI-001" or sequences.
        --project=TEXT      Name of the project folder within a mkfastq or
                                bcl2fastq-generated folder to pick FASTQs from.

    # Martian Runtime
        --jobmode=MODE      Job manager to use. Valid options:
                                local (default), sge, lsf, or a .template file
        --localcores=NUM    Set max cores the pipeline may request at one time.
                                Only applies when --jobmode=local.
        --localmem=NUM      Set max GB the pipeline may request at one time.
                                Only applies when --jobmode=local.
        --mempercore=NUM    Set max GB each job may use at one time.
                                Only applies in cluster jobmodes.
        --maxjobs=NUM       Set max jobs submitted to cluster at one time.
                                Only applies in cluster jobmodes.
        --jobinterval=NUM   Set delay between submitting jobs to cluster, in ms.
                                Only applies in cluster jobmodes.
        --overrides=PATH    The path to a JSON file that specifies stage-level
                                overrides for cores and memory.  Finer-grained
                                than --localcores, --mempercore and --localmem.
                                Consult the 10x support website for an example
                                override file.
        --uiport=PORT       Serve web UI at http://localhost:PORT
        --disable-ui        Do not serve the UI.
        --noexit            Keep web UI running after pipestance completes or fails.
        --nopreflight       Skip preflight checks.

        -h --help           Show this message.
        --version           Show version.

    Note: 'cellranger count' can be called in two ways, depending on how you
    demultiplexed your BCL data into FASTQ files.

    1. If you demultiplexed with 'cellranger mkfastq' or directly with
    Illumina bcl2fastq, then set --fastqs to the project folder containing
    FASTQ files. In addition, set --sample to the name prefixed to the FASTQ
    files comprising your sample. For example, if your FASTQs are named:
        subject1_S1_L001_R1_001.fastq.gz
    then set --sample=subject1

    2. If you demultiplexed with 'cellranger demux', then set --fastqs to a
    demux output folder containing FASTQ files. Use the --lanes and --indices
    options to specify which FASTQ reads comprise your sample.
    This method is deprecated. Please use 'cellranger mkfastq' going forward.

cellranger count --id=sample345 \
                   --transcriptome=/opt/refdata-gex-GRCh38-2020-A \
                   --fastqs=/home/jdoe/runs/HAWT7ADXX/outs/fastq_path \
                   --sample=mysample \
                   --expect-cells=1000 \
                   --localcores=8 \
                   --localmem=64

cellranger count --id=P10_test \
--fastqs=/projects/bgmp/shared/groups/2020/neuron_nerds/THE_DATA \
--sample=P10 \
--transcriptome=/projects/bgmp/shared/groups/2020/neuron_nerds/refdata-gex-mm10-2020-A \
--localcores=8 \
--localmem=64 \


--r1-length=NUM     Hard trim the input Read 1 to this length before
                    analysis.
--r2-length=NUM     Hard trim the input Read 2 to this length before
                    analysis
--indices=INDICES   Comma-separated sample index set "SI-001" or sequences.

tar -xzvf cellranger-4.0.0.tar.gz <- talapas already has the program on it

https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest?
wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz

md5sum: 886eeddde8731ffb58552d0bb81f533d

check:

md5sum refdata-gex-mm10-2020-A.tar.gz
886eeddde8731ffb58552d0bb81f533d  refdata-gex-mm10-2020-A.tar.gz

gunzip refdata-gex-mm10-2020-A.tar.gz <- do not need to do this
tar -xzvf refdata-gex-mm10-2020-A.tar.gz

Reference Build Notes:
https://support.10xgenomics.com/single-cell-gene-expression/software/release-notes/build#mm10_2020A

    # Genome metadata
    genome="mm10"
    version="2020-A"


    # Set up source and build directories
    build="mm10-2020-A_build"
    mkdir -p "$build"


    # Download source files if they do not exist in reference_sources/ folder
    source="reference_sources"
    mkdir -p "$source"


    fasta_url="http://ftp.ensembl.org/pub/release-98/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz"
    fasta_in="${source}/Mus_musculus.GRCm38.dna.primary_assembly.fa"
    gtf_url="http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M23/gencode.vM23.primary_assembly.annotation.gtf.gz"
    gtf_in="${source}/gencode.vM23.primary_assembly.annotation.gtf"


    if [ ! -f "$fasta_in" ]; then
        curl -sS "$fasta_url" | zcat > "$fasta_in"
    fi
    if [ ! -f "$gtf_in" ]; then
        curl -sS "$gtf_url" | zcat > "$gtf_in"
    fi


    # Modify sequence headers in the Ensembl FASTA to match the file
    # "GRCm38.primary_assembly.genome.fa" from GENCODE. Unplaced and unlocalized
    # sequences such as "GL456210.1" have the same names in both versions.
    #
    # Input FASTA:
    #   >1 dna:chromosome chromosome:GRCm38:1:1:195471971:1 REF
    #
    # Output FASTA:
    #   >chr1 1
    fasta_modified="$build/$(basename "$fasta_in").modified"
    # sed commands:
    # 1. Replace metadata after space with original contig name, as in GENCODE
    # 2. Add "chr" to names of autosomes and sex chromosomes
    # 3. Handle the mitochrondrial chromosome
    cat "$fasta_in" \
        | sed -E 's/^>(\S+).*/>\1 \1/' \
        | sed -E 's/^>([0-9]+|[XY]) />chr\1 /' \
        | sed -E 's/^>MT />chrM /' \
        > "$fasta_modified"


    # Remove version suffix from transcript, gene, and exon IDs in order to match
    # previous Cell Ranger reference packages
    #
    # Input GTF:
    #     ... gene_id "ENSMUSG00000102693.1"; ...
    # Output GTF:
    #     ... gene_id "ENSMUSG00000102693"; gene_version "1"; ...
    gtf_modified="$build/$(basename "$gtf_in").modified"
    # Pattern matches Ensembl gene, transcript, and exon IDs for human or mouse:
    ID="(ENS(MUS)?[GTE][0-9]+)\.([0-9]+)"
    cat "$gtf_in" \
        | sed -E 's/gene_id "'"$ID"'";/gene_id "\1"; gene_version "\3";/' \
        | sed -E 's/transcript_id "'"$ID"'";/transcript_id "\1"; transcript_version "\3";/' \
        | sed -E 's/exon_id "'"$ID"'";/exon_id "\1"; exon_version "\3";/' \
        > "$gtf_modified"


    # Define string patterns for GTF tags
    # NOTES:
    # - Since GENCODE release 31/M22 (Ensembl 97), the "lincRNA" and "antisense"
    #   biotypes are part of a more generic "lncRNA" biotype.
    # - These filters are relevant only to GTF files from GENCODE. The GTFs from
    #   Ensembl release 98 have the following differences:
    #   - The names "gene_biotype" and "transcript_biotype" are used instead of
    #     "gene_type" and "transcript_type".
    #   - Readthrough transcripts are present but are not marked with the
    #     "readthrough_transcript" tag.
    BIOTYPE_PATTERN=\
    "(protein_coding|lncRNA|\
    IG_C_gene|IG_D_gene|IG_J_gene|IG_LV_gene|IG_V_gene|\
    IG_V_pseudogene|IG_J_pseudogene|IG_C_pseudogene|\
    TR_C_gene|TR_D_gene|TR_J_gene|TR_V_gene|\
    TR_V_pseudogene|TR_J_pseudogene)"
    GENE_PATTERN="gene_type \"${BIOTYPE_PATTERN}\""
    TX_PATTERN="transcript_type \"${BIOTYPE_PATTERN}\""
    READTHROUGH_PATTERN="tag \"readthrough_transcript\""


    # Construct the gene ID allowlist. We filter the list of all transcripts
    # based on these criteria:
    #   - allowable gene_type (biotype)
    #   - allowable transcript_type (biotype)
    #   - no "readthrough_transcript" tag
    # We then collect the list of gene IDs that have at least one associated
    # transcript passing the filters.
    cat "$gtf_modified" \
        | awk '$3 == "transcript"' \
        | grep -E "$GENE_PATTERN" \
        | grep -E "$TX_PATTERN" \
        | grep -Ev "$READTHROUGH_PATTERN" \
        | sed -E 's/.*(gene_id "[^"]+").*/\1/' \
        | sort \
        | uniq \
        > "${build}/gene_allowlist"


    # Filter the GTF file based on the gene allowlist
    gtf_filtered="${build}/$(basename "$gtf_in").filtered"
    # Copy header lines beginning with "#"
    grep -E "^#" "$gtf_modified" > "$gtf_filtered"
    # Filter to the gene allowlist
    grep -Ff "${build}/gene_allowlist" "$gtf_modified" \
        >> "$gtf_filtered"


    # Create reference package
    cellranger mkref --ref-version="$version" \
        --genome="$genome" --fasta="$fasta_modified" --genes="$gtf_filtered"

nano count_test.srun

    #!/bin/bash
    #SBATCH --account=bgmp
    #SBATCH --partition=bgmp
    #SBATCH --job-name=count_test_%j
    #SBATCH --output=count_test_%j.out
    #SBATCH --error=count_test_%j.err
    #SBATCH --time=1-23:59:59
    #SBATCH --nodes=1
    #SBATCH --ntasks-per-node=1
    #SBATCH --cpus-per-task=8
    #SBATCH --mem=64GB

    conda activate bgmp_py37
    module load cellranger/3.0.2

    dir="/projects/bgmp/shared/groups/2020/neuron_nerds"

    /usr/bin/time -v cellranger count --id=P10_test \
    --fastqs=$dir/THE_DATA \
    --sample=P10 \
    --transcriptome=$dir/refdata-gex-mm10-2020-A \
    --localcores=8 \
    --localmem=64

sbatch count_test.srun
